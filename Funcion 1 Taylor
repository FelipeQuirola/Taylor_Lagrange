func = lambda x : 1 / (25*x*x + 1)
taylor_pol = taylor_approx(func, 0, 5)
taylor_pol

def plot_taylor_approx(fcn: Callable[[float], float], taylor_poly, n: int, x_range: tuple):
    x = sym.symbols("x")
    x_vals = np.linspace(x_range[0], x_range[1], 1000)
    original_fcn = sym.lambdify(x, fcn(x), "numpy")
    y_vals = original_fcn(x_vals)
    plt.plot(x_vals, y_vals, label=f"Funci√≥n original", color='black')
    taylor_fcn = sym.lambdify(x, taylor_poly, "numpy")
    taylor_y_vals = taylor_fcn(x_vals)
    if np.isscalar(taylor_y_vals):
        taylor_y_vals = np.full_like(x_vals, taylor_y_vals)
    plt.plot(x_vals, taylor_y_vals, label=f"Polinomio de Taylor de orden n={n}")
    plt.xlabel("x")
    plt.ylabel("f(x)")
    plt.title("Aproximaciones de Taylor")
    plt.legend()
    plt.grid(True)
    plt.show()

plot_taylor_approx(func, taylor_pol, 5, (-0.2, 0.2))
